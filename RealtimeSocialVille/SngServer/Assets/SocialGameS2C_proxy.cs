




// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.

using System;
using System.Net;

namespace SocialGameS2C
{
	internal class Proxy:Nettention.Proud.RmiProxy
	{
public bool ReplyLogon(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int groupID, int result, String comment, bool isMaster)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.ReplyLogon;
		__msg.Write(__msgid);
		SngClient.Marshaler.Write(__msg, groupID);
		SngClient.Marshaler.Write(__msg, result);
		SngClient.Marshaler.Write(__msg, comment);
		SngClient.Marshaler.Write(__msg, isMaster);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_ReplyLogon, Common.ReplyLogon);
}

public bool ReplyLogon(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, int groupID, int result, String comment, bool isMaster)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.ReplyLogon;
__msg.Write(__msgid);
SngClient.Marshaler.Write(__msg, groupID);
SngClient.Marshaler.Write(__msg, result);
SngClient.Marshaler.Write(__msg, comment);
SngClient.Marshaler.Write(__msg, isMaster);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_ReplyLogon, Common.ReplyLogon);
}
public bool ReplyEnterGame(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int groupID, bool result, int masterID)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.ReplyEnterGame;
		__msg.Write(__msgid);
		SngClient.Marshaler.Write(__msg, groupID);
		SngClient.Marshaler.Write(__msg, result);
		SngClient.Marshaler.Write(__msg, masterID);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_ReplyEnterGame, Common.ReplyEnterGame);
}

public bool ReplyEnterGame(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, int groupID, bool result, int masterID)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.ReplyEnterGame;
__msg.Write(__msgid);
SngClient.Marshaler.Write(__msg, groupID);
SngClient.Marshaler.Write(__msg, result);
SngClient.Marshaler.Write(__msg, masterID);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_ReplyEnterGame, Common.ReplyEnterGame);
}
public bool NotifyAddTree(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int groupID, int treeID, UnityEngine.Vector3 position)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.NotifyAddTree;
		__msg.Write(__msgid);
		SngClient.Marshaler.Write(__msg, groupID);
		SngClient.Marshaler.Write(__msg, treeID);
		SngClient.Marshaler.Write(__msg, position);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_NotifyAddTree, Common.NotifyAddTree);
}

public bool NotifyAddTree(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, int groupID, int treeID, UnityEngine.Vector3 position)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.NotifyAddTree;
__msg.Write(__msgid);
SngClient.Marshaler.Write(__msg, groupID);
SngClient.Marshaler.Write(__msg, treeID);
SngClient.Marshaler.Write(__msg, position);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_NotifyAddTree, Common.NotifyAddTree);
}
public bool NotifyRemoveTree(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int groupID, int treeID)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.NotifyRemoveTree;
		__msg.Write(__msgid);
		SngClient.Marshaler.Write(__msg, groupID);
		SngClient.Marshaler.Write(__msg, treeID);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_NotifyRemoveTree, Common.NotifyRemoveTree);
}

public bool NotifyRemoveTree(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, int groupID, int treeID)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.NotifyRemoveTree;
__msg.Write(__msgid);
SngClient.Marshaler.Write(__msg, groupID);
SngClient.Marshaler.Write(__msg, treeID);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_NotifyRemoveTree, Common.NotifyRemoveTree);
}
public bool NotifyPlayerJoin(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int groupID, String nick, int idx)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.NotifyPlayerJoin;
		__msg.Write(__msgid);
		SngClient.Marshaler.Write(__msg, groupID);
		SngClient.Marshaler.Write(__msg, nick);
		SngClient.Marshaler.Write(__msg, idx);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_NotifyPlayerJoin, Common.NotifyPlayerJoin);
}

public bool NotifyPlayerJoin(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, int groupID, String nick, int idx)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.NotifyPlayerJoin;
__msg.Write(__msgid);
SngClient.Marshaler.Write(__msg, groupID);
SngClient.Marshaler.Write(__msg, nick);
SngClient.Marshaler.Write(__msg, idx);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_NotifyPlayerJoin, Common.NotifyPlayerJoin);
}
public bool NotifyPlayerLeave(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int groupID, int idx, bool changeMaster, int newMasterID)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.NotifyPlayerLeave;
		__msg.Write(__msgid);
		SngClient.Marshaler.Write(__msg, groupID);
		SngClient.Marshaler.Write(__msg, idx);
		SngClient.Marshaler.Write(__msg, changeMaster);
		SngClient.Marshaler.Write(__msg, newMasterID);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_NotifyPlayerLeave, Common.NotifyPlayerLeave);
}

public bool NotifyPlayerLeave(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, int groupID, int idx, bool changeMaster, int newMasterID)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.NotifyPlayerLeave;
__msg.Write(__msgid);
SngClient.Marshaler.Write(__msg, groupID);
SngClient.Marshaler.Write(__msg, idx);
SngClient.Marshaler.Write(__msg, changeMaster);
SngClient.Marshaler.Write(__msg, newMasterID);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_NotifyPlayerLeave, Common.NotifyPlayerLeave);
}
#if USE_RMI_NAME_STRING
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_ReplyLogon="ReplyLogon";
public const string RmiName_ReplyEnterGame="ReplyEnterGame";
public const string RmiName_NotifyAddTree="NotifyAddTree";
public const string RmiName_NotifyRemoveTree="NotifyRemoveTree";
public const string RmiName_NotifyPlayerJoin="NotifyPlayerJoin";
public const string RmiName_NotifyPlayerLeave="NotifyPlayerLeave";
       
public const string RmiName_First = RmiName_ReplyLogon;
#else
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_ReplyLogon="";
public const string RmiName_ReplyEnterGame="";
public const string RmiName_NotifyAddTree="";
public const string RmiName_NotifyRemoveTree="";
public const string RmiName_NotifyPlayerJoin="";
public const string RmiName_NotifyPlayerLeave="";
       
public const string RmiName_First = "";
#endif
		public override Nettention.Proud.RmiID[] GetRmiIDList() { return Common.RmiIDList; } 
	}
}

